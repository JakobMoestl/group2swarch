/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CartAddBody;
import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse2001;
import io.swagger.model.UsersLoginBody;
import io.swagger.model.UsersRegisterBody;
import io.swagger.model.UsersResetpasswordBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-09-25T13:16:13.627391754Z[GMT]")
@Validated
public interface ApiApi {

    @Operation(summary = "Produkt zum Warenkorb hinzufügen", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Produkt wurde zum Warenkorb hinzugefügt"),
        
        @ApiResponse(responseCode = "400", description = "Schlechte Anfrage - Ungültige Eingabe"),
        
        @ApiResponse(responseCode = "404", description = "Produkt nicht gefunden"),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler") })
    @RequestMapping(value = "/api/cart/add",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> apiCartAddPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CartAddBody body);


    @Operation(summary = "Warenkorb anzeigen", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Warenkorb anzeigen", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2001.class))) })
    @RequestMapping(value = "/api/cart",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2001> apiCartGet();


    @Operation(summary = "Bestellung aufgeben", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Bestellung aufgegeben"),
        
        @ApiResponse(responseCode = "400", description = "Schlechte Anfrage - Ungültige Eingabe"),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler") })
    @RequestMapping(value = "/api/cart/order",
        method = RequestMethod.POST)
    ResponseEntity<Void> apiCartOrderPost();


    @Operation(summary = "Produkte im Katalog anzeigen", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Liste von Produkten", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = InlineResponse200.class)))) })
    @RequestMapping(value = "/api/products",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<InlineResponse200>> apiProductsGet();


    @Operation(summary = "Benutzer anmelden", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Anmeldung erfolgreich"),
        
        @ApiResponse(responseCode = "401", description = "Ungültige Anmeldeinformationen") })
    @RequestMapping(value = "/api/users/login",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> apiUsersLoginPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UsersLoginBody body);


    @Operation(summary = "Benutzer registrieren", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Registrierung erfolgreich"),
        
        @ApiResponse(responseCode = "400", description = "Registrierung fehlgeschlagen") })
    @RequestMapping(value = "/api/users/register",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> apiUsersRegisterPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UsersRegisterBody body);


    @Operation(summary = "Passwort zurücksetzen", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Passwort zurückgesetzt"),
        
        @ApiResponse(responseCode = "404", description = "Benutzer nicht gefunden"),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler") })
    @RequestMapping(value = "/api/users/reset-password",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> apiUsersResetPasswordPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UsersResetpasswordBody body);

}

